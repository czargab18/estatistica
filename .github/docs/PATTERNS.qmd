# Define os padrões usados no Repositório
- padrões de `commits`
- padrões de chaves `ssh`
- padrões do ambiente virtual `.venv`

## Estrutura e padrões das `branchs`

- `main`: branch "simula" o ambiente de **`produção`**. Como uso o GiHub Pages, apenas o que estiver finalizado deve ser jogado empurado para ela (única).
- `stag`: branch "simula" o ambiente de **`pre-produção`** (estagío). Usada mais para corrigir problemas de `merge` e testes (única).
- `dev*`: branch "simula" o ambiente de **`desenvolvimento`**. para cada "*" é um possível desenvolvedor que pode contribuir. Além diso podemos ter branchs dessesdesenvolvedores com: `dev1books` que é a branch de ``renderização de books`` do ``dev1``


## Padrões de commits usados neste Repositório

O commit semântico possui os elementos estruturais abaixo (tipos), que informam a intenção do seu commit ao utilizador(a) de seu código.

Isso indica algo
```{bash}
git commit -m 'padrao(acao): mensagem' -m 'descrição.'
```

- `docs` Commits do tipo docs indicam que houveram **mudanças na documentação**, como por exemplo no Readme do seu repositório. (Não inclui alterações em código).
  - Exemplo: `docs: atualiza documentação da API`
  - Exemplo: `docs: adiciona guia de contribuição`
  - Exemplo: `docs: corrige erros de digitação no README`
  - Exemplo: `docs: adiciona exemplos de uso na documentação`

- `fix` Commits do tipo fix indicam que seu trecho de código commitado está **solucionando um problema** (bug fix), (se relaciona com o PATCH do versionamento semântico).
  - Exemplo: `fix: corrige erro de validação no formulário de cadastro`
  - Exemplo: `fix: corrige problema de carregamento lento na página inicial`
  - Exemplo: `fix: resolve problema de compatibilidade com o navegador X`
  - Exemplo: `fix: corrige erro de cálculo no relatório financeiro`

- `style` Commits do tipo style indicam que houveram alterações referentes a **formatações de código**, semicolons, trailing spaces, lint... (Não inclui alterações em código).
  - Exemplo: `style: corrige formatação do código`
  - Exemplo: `style: aplica linting ao código`
  - Exemplo: `style: ajusta indentação em arquivos CSS`
  - Exemplo: `style: remove espaços em branco desnecessários`

- `refactor` Commits do tipo refactor referem-se a mudanças devido a **refatorações que não alterem sua funcionalidade**, como por exemplo, uma alteração no formato como é processada determinada parte da tela, mas que manteve a mesma funcionalidade, ou melhorias de performance devido a um code review.
  - Exemplo: `refactor: refatora função de cálculo de impostos`
  - Exemplo: `refactor: melhora estrutura do código do componente de login`
  - Exemplo: `refactor: simplifica lógica de autenticação`
  - Exemplo: `refactor: separa funções utilitárias em módulos`

- `ci` Commits do tipo ci indicam mudanças relacionadas a **integração contínua** (_continuous integration_).
  - Exemplo: `ci: configura pipeline de integração contínua`
  - Exemplo: `ci: adiciona testes automatizados ao pipeline`
  - Exemplo: `ci: corrige configuração do Jenkins`
  - Exemplo: `ci: adiciona verificação de qualidade de código`

- `cleanup` Commits do tipo cleanup são utilizados para remover código comentado, trechos desnecessários ou qualquer outra forma de limpeza do código-fonte, visando aprimorar sua legibilidade e manutenibilidade.
  - Exemplo: `cleanup: remove código comentado`
  - Exemplo: `cleanup: remove funções obsoletas`
  - Exemplo: `cleanup: apaga arquivos de log`
  - Exemplo: `cleanup: remove variáveis não utilizadas`

- `folders`: Usado para modificações de diretórios (exclusão, criação, mudança, renomeação).
  - Exemplo: `folders: cria estrutura de pastas para componentes`
  - Exemplo: `folders: reorganiza diretórios do projeto`
  - Exemplo: `folders: adiciona arquivos (imagens, fontes,...)`
  - Exemplo: `folders: apaga arquivos  (imagens, fontes,...)`
  - Exemplo: `folders: move arquivos para novo diretório`
  - Exemplo: `folders: adiciona novas fontes ao projeto`

- `files`: Usado para modificações de arquivos (exclusão, criação, mudança, renomeação).
  - Exemplo: `files: cria estrutura de pastas para componentes`
  - Exemplo: `files: reorganiza diretórios do projeto`
  - Exemplo: `files: adiciona arquivos (imagens, fontes,...)`
  - Exemplo: `files: apaga arquivos  (imagens, fontes,...)`
  - Exemplo: `files: move arquivos para novo diretório`
  - Exemplo: `files: adiciona novas fontes ao projeto`

- `feature` Commits do tipo feature indicam a **adição de uma nova funcionalidade** ao código.
  - Exemplo: `feature: adiciona funcionalidade de exportação de dados`
  - Exemplo: `feature: adiciona suporte a notificações push`
  - Exemplo: `feature: implementa sistema de comentários`
  - Exemplo: `feature: adiciona integração com API externa`

- `pacotes`: referente a pacotes de funções



## Padrões de SSH do repositório

- notebook ==> Hospedagem
- notebook ==> GitHub
- Autenticação (feito no painel da hostinger):
  - GitHub |==> Hospedagem (Solicitação)
  - GitHub <==| Hospedagem (Permição)
  
Observação: A chave **Auth privada** criada e salva como 
"estatistica-auth-github_hostinge" deve ser colocada no 
repositório do GitHub e a **Auth publica** no painel da Hostinger

### Nomenclatura

padrão de chave: `dominio-equipamento-local-serverof@serverto`
- **dominio**:  domínio do site que se refere.
- **equipamento**: tipo de equipamento (PC, Notebook, etc.).
- **local**: Localização (Casa, Trabalho, Faculdade, etc.).
- **serverof**: Servidor que solicita (Local-casa, Github, etc.).
- **serverto**: Servidor que autoriza (hospedagem).
Observação: Se a interação for entre Hospedagem e GitHub, então os parametros
`equipamento-local` para `auth`

#### Exemplos
```{bash}
C:\~\.ssh> ssh-keygen -t rsa -b 4096 -C "estatistica-nb-home-local@hostinger"
```
Observação: renomear a chave para **``estatistica-nb-home-local_hostinger``**
```{bash}
C:\~\.ssh> ssh-keygen -t rsa -b 4096 -C "estatistica-auth-github@hostinger"
```
Observação: renomear a chave para **``estatistica-nb-home-github_hostinger``**

### Tipo de chave
- Notebook para a Hospedagem Hostinger
  ```{}
  ssh-keygen -t rsa -b 4096 -C "nb-home-local-estatistica@hostinger"
  ```
- Notebook para o GitHub
  ```{}
  ssh-keygen -t rsa -b 4096 -C "estatistica-nb-home-local@github"
  ```
- Auth entre Github e Hospedagem Hostinger
  ```{}
  ssh-keygen -m PEM -t rsa -b 4096 -C "nb-home-estatistica-local@hostinger"
  ```

## Referência
- YouTube [Código Fonte TV](https://www.youtube.com/watch?v=lfoYZ1tz33k&list=PLcX1VCeOd7Sz976bwnWOV-1cE9I6TAmd_&index=1&t=228s&pp=gAQBiAQB)