name: Atualiza submodules e renderiza livros
# description: Atualiza submodules e outras ações relacionadas

on:
  workflow_dispatch:
  repository_dispatch:
    types: [submodule-books]

jobs:
  books:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    env:
      USEREMAIL: ${{ secrets.USEREMAIL }}
      USERNAME: ${{ github.repository_owner }}
      TOKEN: ${{ secrets.TOKEN_REPO_SYNC }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout estatistica
        id: checkout_estatistica
        uses: actions/checkout@v4
        with:
          token: ${{ env.TOKEN }}
          ref: main
          path: "estatistica"
          submodules: "true"

      - name: Configura usuário do git
        id: configura_usuario_git
        run: |
          git config --global user.name "${{ env.USERNAME }}"
          git config --global user.email "${{ env.USEREMAIL }}"

      - name: Atualiza submodules books e backend
        id: atualiza_submodulos_books_backend
        working-directory: estatistica
        run: |
          git submodule update --remote books backend
          git add books backend
          git submodule foreach git fetch

      - name: Verificar submódulo 'books'
        id: verifica_submodulo_books
        working-directory: estatistica
        run: |
          if cd books; then
            echo "Submódulo 'books' atualizado com sucesso."
          else
            echo "Falha ao atualizar o submódulo 'books'."
            exit 1
          fi

      - name: Detectar e salvar nomes dos livros alterados
        id: detectar_livros_alterados
        working-directory: estatistica/books
        run: |
          PADRAO='^build/[A-Z]{3}[0-9]{4}/'
          PASTAS=$(git diff --name-only HEAD @{u} \
            | grep -E "$PADRAO" \
            | sed -E 's|^(build/[A-Z]{3}[0-9]{4}).*|\1|' \
            | sort -u | tr '\n' ' ')
          echo "PASTAS_LIVROS_ALTERADOS=$PASTAS" >> $GITHUB_OUTPUT

      - name: Configura Quarto
        id: configura_quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Versão do Quarto
        id: versao_quarto
        run: quarto --version 

      - name: Renderiza livros Modificados
        working-directory: estatistica/books
        id: renderiza_livros_modificados
        if: ${{ steps.detectar_livros_alterados.outputs.PASTAS_LIVROS_ALTERADOS != '' }}
        run: |
          PASTAS=$(echo "${{ steps.detectar_livros_alterados.outputs.PASTAS_LIVROS_ALTERADOS }}" | tr ' ' '\n')
          for PASTA in $PASTAS; do
            echo "Renderizando livros na pasta: $PASTA"
            quarto render build/$PASTA --to html --execute --output-dir "../../books/${folder}"
          done

      - name: Limpa diretórios de 'libs'
        id: limpa_libs
        working-directory: estatistica/books/_books
        if: ${{ steps.detectar_livros_alterados.outputs.PASTAS_LIVROS_ALTERADOS != '' }}
        run: |
          LIBS="libs site_libs _libs _site delete _books index_files"
          for PASTA in $(echo "${{ steps.detectar_livros_alterados.outputs.PASTAS_LIVROS_ALTERADOS }}"); do
            for DIR in $LIBS; do
              find "$PASTA" -type d -name "$DIR" -exec rm -rf {} +
            done
          done

      - name: Configura Python
        id: configura_python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          check-latest: true

      - name: Instalar dependencias do Python
        working-directory: estatistica/books/
        id: instala_dependencias_python
        run: |
          python -m pip install --upgrade pip
          pip install -r run/requirements.txt

      - name: Automação de Links com Python
        working-directory: estatistica/books/
        id: automacao_links_books_python
        run: |
          python run/cleanBooks.py --base-dir _book/

      - name: Commitar alterações de 'estatistica/books'
        id: commita_alteracoes_books
        working-directory: estatistica/books
        run: |
          git add _books
          git commit -m "books: atualiza livros renderizados via 'estatistica'." || echo "Nada a commitar"
          git push origin main

      - name: Copiar arquivos para estatistica/book
        id: sincronizar_livros_renderizados
        working-directory: estatistica
        run: |
          rsync -av --update books/_book/ estatistica/book/

      - name: Garante que a branch 'book' existe e faz checkout
        working-directory: estatistica
        run: |
          if ! git rev-parse --verify book >/dev/null 2>&1; then
            git checkout --orphan book
            git rm -rf .
            git commit --allow-empty -m "Cria branch book inicial"
            git push origin book
          else
            git checkout book
          fi

      - name: Commitar alterações de 'estatistica'
        id: commita_alteracoes_book
        working-directory: estatistica
        run: |
          git add book
          git commit -m "book: atualiza livros renderizados via 'estatistica'." || echo "Nada a commitar"
          git push origin book

      - name: Instala GitHub CLI
        id: instala_github_cli
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Cria Pull Request para branch book
        id: cria_pull_request_book
        working-directory: estatistica
        run: |
          gh auth login --with-token < ${{ secrets.GITHUB_TOKEN }}
          gh pr create \
            --base main \
            --head book \
            --title "Atualiza livros renderizados" \
            --body "Atualização automática dos livros renderizados via workflow."

