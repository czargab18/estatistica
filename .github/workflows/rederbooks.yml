name: Renderizar Books Quarto

on:
  push:
    branches-ignore: [main] 
  pull_request:
      branches-ignore: [main] 
  schedule:
    - cron: "0 0 * * 1"
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  pull-requests: read

jobs:
  detect-modificacao:
    runs-on: ubuntu-latest
    outputs:
      subfolders: ${{ steps.detect-subfolders.outputs.subfolders }}
    steps:
      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Verificar evento do GitHub
        id: check-github-event
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "event_type=pull_request" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "event_type=push" >> $GITHUB_ENV
          else
            echo "event_type=commit" >> $GITHUB_ENV
          fi

      - name: Receive API data
        id: fetch-api-data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "$event_type" == "pull_request" ]]; then
            API_RESPONSE=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${{ github.event.pull_request.url }}/files")
          elif [[ "$event_type" == "push" ]]; then
            API_RESPONSE=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}")
          elif [[ "$event_type" == "workflow_dispatch" ]]; then
            # Para eventos manuais, você pode personalizar o comportamento.
            echo "Evento 'workflow_dispatch' detectado. Adicione lógica personalizada aqui."
            API_RESPONSE=""
          elif [[ "$event_type" == "commit" ]]; then
            # Tratar eventos de commit
            API_RESPONSE=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}")
          else
            echo "Evento não suportado: $event_type"
            exit 1
          fi

          # Salvar resposta no arquivo JSON
          echo "$API_RESPONSE" | jq -c . > api_response.json || {
            echo "Invalid or malformed JSON received from API."
            exit 1
          }

      - name: Debug API response with jq
        run: |
          echo "Debugging API response:"
          cat api_response.json | jq . || {
            echo "Error processing JSON."
            exit 1
          }

      # - name: Depurar variáveis de ambiente
      #   run: |
      #     echo "Valor de arquivos_modificados: ${{ env.arquivos_modificados }}"
      #     echo "Valor de subfolders: ${{ env.subfolders }}"

      - name: Processar arquivos modificados
        id: process-changed-files
        run: |
          echo "Debugging API response:"
          cat api_response.json | jq .

          # Processar a resposta da API para identificar arquivos modificados
          CHANGED_FILES=$(jq -r '.files[].filename' api_response.json | grep '^books/build/' || echo "")
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "Nenhum arquivo modificado encontrado no diretório 'books/build/'."
            echo "arquivos_modificados=" >> $GITHUB_ENV
          else
            echo "Arquivos modificados: $CHANGED_FILES"
            echo "arquivos_modificados=$CHANGED_FILES" >> $GITHUB_ENV
          fi

      # - name: v1 Identificar subdiretórios correspondentes
      #   id: detect-subfolders
      #   run: |
      #     MATCHED_SUBFOLDERS=$(echo "${{ steps.process-changed-files.outputs.arquivos_modificados }}" | grep -E '^books/build/[A-Z]{3}[0-9]{4}/' | cut -d'/' -f2 | uniq || echo "")
      #     echo "subfolders=$MATCHED_SUBFOLDERS" >> $GITHUB_ENV

      - name: Identificar subdiretórios correspondentes
        env:
          arquivos_modificados: ${{ env.arquivos_modificados }}
        id: detect-subfolders
        run: |
          echo "Arquivos modificados: ${{ env.arquivos_modificados }}"
          
          # Identificar subdiretórios dentro de books/build/
          MATCHED_SUBFOLDERS=$(echo "${{ env.arquivos_modificados }}" | grep -oE '^books/build/[A-Z]{3}[0-9]{4}/' | cut -d'/' -f3 | uniq || echo "")
          echo "Subdiretórios detectados: $MATCHED_SUBFOLDERS"

          # Exportar subdiretórios como saída da etapa
          echo "subfolders=$MATCHED_SUBFOLDERS" >> $GITHUB_OUTPUT

      - name: Depurar variável subfolders
        run: |
           echo "Valor de subfolders configurado: ${{ steps.detect-subfolders.outputs.subfolders }}"

  renderizar-books:
    runs-on: ubuntu-latest
    if: ${{ needs.detect-modificacao.outputs.subfolders != '' }}
    needs: [detect-modificacao]
    steps:
      - name: Verificar subdiretórios
        run: |
          echo "Subdiretórios detectados: ${{ needs.detect-modificacao.outputs.subfolders }}"
          if [[ -z "${{ needs.detect-modificacao.outputs.subfolders }}" ]]; then
            echo "Nenhum subdiretório foi detectado. Pulando etapa."
          fi

      - name: Checkout do repositório
        uses: actions/checkout@v4

      # Configura Python
      - name: Cache de Dependências Python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Configura o Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # - name: Instalar Dependências Python
      #   run: pip install -r requirements.txt || echo "Ignorando dependências incompatíveis"

      - name: Instalar Pacote backend
        run: |
            python -m pip install --upgrade pip
            pip install -r ./backend/core/requirements.txt || echo "Ignorando dependências incompatíveis"

#     # Configura R
#     - name: Cache de Pacotes R
#       uses: actions/cache@v3
#       with:
#         path: ~/.R/library
#         key: ${{ runner.os }}-R-library-${{ hashFiles('**/DESCRIPTION') }}
#         restore-keys: |
#           ${{ runner.os }}-R-library-

#     - name: Configura a Linguagem R
#       uses: r-lib/actions/setup-r@v2

#     - name: Instalar Pacotes R (em paralelo)
#       run: |
#         Rscript -e '
#         if (!requireNamespace("pak", quietly = TRUE)) {
#           install.packages("pak")
#         }
#         pak::pkg_install(c("knitr", "rmarkdown", "downlit", "xml2"))'

      # Configura Quarto

      - name: Cache de Configurações do Quarto
        uses: actions/cache@v3
        with:
          path: ~/.quarto
          key: ${{ runner.os }}-quarto-${{ hashFiles('**/*.qmd', '**/quarto.yml') }}
          restore-keys: |
            ${{ runner.os }}-quarto-

      - name: Configura o Quarto
        uses: quarto-dev/quarto-actions/setup@v2

        # renderizar books e correções
      - name: Renderizar cada book modificado
        run: |
          for folder in ${{ needs.detect-modificacao.outputs.subfolders }}; do
            echo "Rendering book in books/build/$folder"
            quarto render books/build/$folder --to html
          done

      - name: Correções com Python
        env:
            PYTHONPATH: ./  
        run: |
          for folder in ${{ needs.detect-modificacao.outputs.subfolders }}; do
            echo "Corrigindo book in books/build/$folder"
           python -m backend.tasks.books.renderbook
          done

      - name: Nenhuma Modificação Detectada
        if: ${{ needs.detect-modificacao.outputs.subfolders == '' }}
        run: echo "Nenhuma modificação detectada nos subdiretórios de books/build."
      - name: Renderiza books
        run: echo "Passo não desenvolvido."
