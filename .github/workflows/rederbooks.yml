name: Renderizar Books Quarto

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 1"
  push:
    branches-ignore: [main]
    paths:
      - "./books/**"
  pull_request:
    branches-ignore: [main]
    paths:
      - "./books/**"

permissions:
  contents: write
  pages: write
  pull-requests: read

jobs:
  detect-modificacao:
    runs-on: ubuntu-latest
    steps:
      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Verificar evento do GitHub
        id: check-github-event
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "event_type=pull_request" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "event_type=push" >> $GITHUB_ENV
          else
            echo "event_type=commit" >> $GITHUB_ENV
          fi

      - name: Receive API data
        id: fetch-api-data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "$event_type" == "pull_request" ]]; then
            API_RESPONSE=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${{ github.event.pull_request.url }}/files")
          else
            API_RESPONSE=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}")
          fi

          # Handle API response safely
          echo "$API_RESPONSE" | jq -c . > api_response.json || {
            echo "Invalid or malformed JSON received from API."
            exit 1
          }

      - name: Processar arquivos modificados
        id: process-changed-files
        run: |
          CHANGED_FILES=$(jq -r '.files[].filename' api_response.json | grep '^build/' || echo "")
          echo "::set-output name=arquivos_modificados::$CHANGED_FILES"

      - name: Identificar subdiretórios correspondentes
        id: detect-subfolders
        run: |
          MATCHED_SUBFOLDERS=$(echo "${{ steps.process-changed-files.outputs.arquivos_modificados }}" | grep -E '^build/[A-Z]{3}[0-9]{4}/' | cut -d'/' -f2 | uniq || echo "")
          echo "::set-output name=subfolders::$MATCHED_SUBFOLDERS"

  config-r:
    needs: [detect-modificacao]
    if: ${{ needs.detect-modificacao.outputs.subfolders != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Cache de Pacotes R
        uses: actions/cache@v3
        with:
          path: ~/.R/library
          key: ${{ runner.os }}-R-library-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: |
            ${{ runner.os }}-R-library-

      - name: Configura a Linguagem R
        uses: r-lib/actions/setup-r@v2

      - name: Instalar Pacotes R
        run: |
          Rscript -e '
          pacotes <- c("knitr", "rmarkdown", "downlit", "xml2") 
          for (pacote in pacotes) {
            if (!requireNamespace(pacote, quietly = TRUE)) {
              install.packages(pacote, dependencies = TRUE)
            }
          }'

  config-python:
    needs: [detect-modificacao]
    if: ${{ needs.detect-modificacao.outputs.subfolders != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Cache de Dependências Python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Configura o Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Instalar Dependências Python
        run: pip install -r requirements.txt || echo "Ignorando dependências incompatíveis"

      - name: Instalar Pacote backend
        run: pip install -e backend

  config-quarto:
    needs: [detect-modificacao]
    if: ${{ needs.detect-modificacao.outputs.subfolders != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Cache de Configurações do Quarto
        uses: actions/cache@v3
        with:
          path: ~/.quarto
          key: ${{ runner.os }}-quarto-${{ hashFiles('**/*.qmd', '**/quarto.yml') }}
          restore-keys: |
            ${{ runner.os }}-quarto-

      - name: Configura o Quarto
        uses: quarto-dev/quarto-actions/setup@v2

  renderizar-books:
    runs-on: ubuntu-latest
    needs: [config-r, config-python, config-quarto]
    if: ${{ needs.detect-modificacao.outputs.subfolders != '' }}
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Renderizar cada book modificado
        run: |
          for folder in ${{ needs.detect-modificacao.outputs.subfolders }}; do
            echo "Rendering book in build/$folder"
            quarto render build/$folder --to html
          done

      - name: Correções com Python
        run: |
          for folder in ${{ needs.detect-modificacao.outputs.subfolders }}; do
            echo "corrigindo book in build/$folder"
            python -m 
          done

      - name: Nenhuma Modificação Detectada
        if: ${{ needs.detect-modificacao.outputs.subfolders == '' }}
        run: echo "Nenhuma modificação detectada nos subdiretórios de build."