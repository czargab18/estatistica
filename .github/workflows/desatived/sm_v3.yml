# Código gerado/assistido por IA
name: sm_v3
# description: Workflow para atualizar arquivos dos submódulos com o repositório Estatística.

on:
  workflow_dispatch:
    inputs:
      livros:
        description: 'Lista de livros para renderizar (ex: MAT1001 FIS2023) - deixe vazio para renderizar todos'
        required: false
        type: string
        default: ''
  repository_dispatch:
    types: [atualizar-books, atualizar-newshub, atualizar-backend, atualizar-wss]

env:
  url: ${{ vars.URL }}
  TOKEN: ${{ secrets.TOKEN_REPO_SYNC }}
  USERNAME: ${{ github.repository_owner }}
  USEREMAIL: ${{ secrets.USEREMAIL }}

permissions:
  pages: write
  id-token: write
  contents: write
  actions: write
  pull-requests: write

jobs:
  books:
    permissions:
      contents: write
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.action == 'atualizar-books' }}
    runs-on: ubuntu-latest
    environment:
      name: ENVIRONMENT
    steps:
      - name: Configura credenciais do Git para submódulos privados
        run: |
          git config --global url."https://${{ env.TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.USERNAME }}/estatistica
          token: ${{ env.TOKEN }}
          ref: "stag"
          fetch-tags: true

      - name: Atualizar submodule 'books'
        run: |
          git submodule update --init --remote --merge books

      - name: Configura Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Determina livros a renderizar
        id: get-books
        run: |
          echo "📚 Determinando livros a renderizar..."
          
          # Prioridade 1: workflow_dispatch manual
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.livros }}" ]; then
            books_list="${{ github.event.inputs.livros }}"
            source="manual input"
            
          # Prioridade 2: repository_dispatch com payload
          elif [ "${{ github.event_name }}" == "repository_dispatch" ] && [ "${{ github.event.client_payload.livros }}" ]; then
            books_list="${{ github.event.client_payload.livros }}"
            source="repository dispatch"
            
          # Fallback: renderiza todos os livros
          else
            books_list=$(find books/build -maxdepth 1 -type d -regex '.*/[A-Z]\{3\}[0-9]\{4\} -printf '%f\n' | sort | tr '\n' ' ')
            source="auto-detect (todos)"
          fi
          
          echo "📋 Fonte: $source"
          echo "📖 Livros: $books_list"
          
          # Salva para próximos steps
          echo "$books_list" | tr ' ' '\n' > books_list.txt
          
          # Conta livros
          book_count=$(echo "$books_list" | wc -w)
          echo "books-count=$book_count" >> $GITHUB_OUTPUT
          echo "📊 Total: $book_count livros"

      - name: Renderiza livros com Quarto
        run: |
          echo "⚡ Iniciando renderização..."
          
          rendered_count=0
          failed_count=0
          
          while IFS= read -r folder; do
            # Remove espaços e linhas vazias
            folder=$(echo "$folder" | xargs)
            [ -z "$folder" ] && continue
            
            # Valida padrão [A-Z]{3}[0-9]{4}
            if ! echo "$folder" | grep -qE '^[A-Z]{3}[0-9]{4}''; then
              echo "⚠️  '$folder' não segue padrão [A-Z]{3}[0-9]{4} - pulando"
              continue
            fi
            
            # Verifica se diretório existe
            if [ ! -d "books/build/$folder" ]; then
              echo "❌ books/build/$folder não encontrado"
              failed_count=$((failed_count + 1))
              continue
            fi
            
            echo "🔄 Renderizando: $folder"
            
            # Garante diretório de saída
            mkdir -p "book/$folder"
            
            # Renderiza com Quarto
            if quarto render "books/build/$folder" \
                --to html \
                --execute \
                --output-dir "../../book/$folder" 2>&1 | tee "render_${folder}.log"; then
              echo "✅ $folder → Sucesso"
              rendered_count=$((rendered_count + 1))
              echo "$folder" >> rendered_books.txt
            else
              echo "❌ $folder → Falha"
              failed_count=$((failed_count + 1))
            fi
            
          done < books_list.txt
          
          echo ""
          echo "📊 Relatório de Renderização:"
          echo "   ✅ Sucesso: $rendered_count"
          echo "   ❌ Falhas: $failed_count"
          echo "   📚 Total: $((rendered_count + failed_count))"
          
          # Verifica se pelo menos um foi renderizado
          if [ "$rendered_count" -eq 0 ]; then
            echo "❌ Nenhum livro foi renderizado com sucesso"
            exit 1
          fi

      - name: Atualizar submodule 'backend'
        run: |
          git submodule update --init --remote --merge backend
      
      - name: Instalar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.*'

      - name: Instalar dependências do backend
        run: |
          pip install -r backend/actions/run/requirements.txt

      - name: Padroniza HTMLs com backend
        run: |
          echo "🎨 Padronizando HTMLs dos livros..."
          
          python ./backend/actions/run/site_html_manager.py \
            --only-head --dynamic-head --path ./book/
          
          python ./backend/actions/run/site_html_manager.py \
            --only-header --path ./book/
          
          python ./backend/actions/run/site_html_manager.py \
            --only-footer --path ./book/
          
          echo "✅ Padronização concluída"

      - name: Configura Git
        run: |
          git config user.name "${{ env.USERNAME }}"
          git config user.email "${{ env.USEREMAIL }}"

      - name: Commit e criar Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.TOKEN }}
          base: main
          branch: book
          delete-branch: true
          title: "books: atualiza livros Quarto renderizados"
          labels: |
            books
            quarto
            action
            needs-review
            automated-pr
          assignees: ${{ github.repository_owner }}
          reviewers: ${{ env.USERNAME }}
          draft: false
          commit-message: |
            books: atualiza e padroniza livros renderizados

            Livros atualizados:
            $(cat rendered_books.txt 2>/dev/null | sed 's/^/- /' || echo "- Nenhum")

            Origem: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.pr_number || 'manual' }}
            Commit fonte: ${{ github.event.client_payload.commit_sha || github.sha }}
            Data: $(date +'%Y-%m-%d %H:%M:%S UTC')

          body: |
            ## 📖 Atualização de Livros Renderizados

            Esta PR contém a atualização dos livros renderizados via GitHub Actions.

            ### 📋 Informações da Atualização
            - **Origem**: ${{ github.event_name == 'repository_dispatch' && 'Repository Dispatch (books)' || 'Manual' }}
            - **PR origem**: ${{ github.event.client_payload.pr_number || 'N/A' }}
            - **Books commit**: ${{ github.event.client_payload.commit_sha || 'N/A' }}
            - **Workflow**: `${{ github.run_id }}`
            - **Data**: $(date +'%Y-%m-%d %H:%M:%S UTC')
            - **Livros processados**: ${{ steps.get-books-manual.outputs.books-count || steps.get-books-dispatch.outputs.books-count }}

            ### 📚 Livros Renderizados e Padronizados
            $(cat rendered_books.txt 2>/dev/null | sed 's/^/- 📖 /' || echo "- Nenhum livro renderizado")

            ### 🔄 Processamento Realizado
            1. ✅ Submódulo `books` atualizado
            2. ✅ Livros renderizados com Quarto
            3. ✅ HTMLs padronizados com `site_html_manager.py`:
               - Head (dinâmico)
               - Header
               - Footer
            4. ✅ Estrutura de pastas organizada

            ---

            ## 👀 Review Checklist

            Por favor, verifique:
            - [ ] 📖 Livros foram renderizados corretamente
            - [ ] 🎨 Formatação e estilos estão adequados (head/header/footer)
            - [ ] 🔗 Links internos funcionam
            - [ ] 📱 Layout é responsivo
            - [ ] 📁 Estrutura de pastas está organizada

            ---
            **⚠️ Esta PR requer aprovação manual antes do merge.**

      - name: Limpa arquivos temporários
        if: always()
        run: |
          echo "🧹 Limpando arquivos temporários..."
          rm -f books_list.txt rendered_books.txt render_*.log
          echo "✅ Arquivos temporários removidos"